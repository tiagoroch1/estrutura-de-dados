Atividade 2 - Interpolation Search

Descrição do Algoritmo:
O Interpolation Search é um algoritmo de busca para listas ordenadas que tenta adivinhar a posição do elemento baseado em sua distribuição. É eficiente em listas com intervalos uniformes, onde os elementos são espaçados regularmente.

Funcionamento:
1. Inicialize dois ponteiros: `low` (início da lista) e `high` (fim da lista).
2. Estime a posição `pos` do elemento com base na fórmula de interpolação:
   pos = low + ((high - low) * (target - arr[low])) // (arr[high] - arr[low])
3. Compare o elemento em `pos` com o alvo:
   - Se forem iguais, retorne `pos`.
   - Se o alvo for menor, ajuste `high` para `pos - 1`.
   - Se o alvo for maior, ajuste `low` para `pos + 1`.
4. Repita até encontrar o elemento ou esgotar o espaço de busca.

Complexidade:
- Tempo:
  - Melhor caso: O(log log n) para listas com distribuição uniforme.
  - Caso médio e pior caso: O(n), se os elementos forem distribuídos irregularmente.
- Espaço: O(1), pois não utiliza memória extra significativa.

Exemplo de Execução:
Lista ordenada uniforme: [10, 20, 30, 40, 50, 60, 70]
Buscar elemento: 50

Passos:
1. Inicialize: low = 0, high = 6.
2. Estime: pos = 0 + ((6 - 0) * (50 - 10)) // (70 - 10) = 3.
3. Elemento na posição 3 é 50, que é igual ao alvo.
Resultado: Índice encontrado = 3.

Observação:
O Interpolation Search é mais eficiente que o Binary Search em listas uniformemente distribuídas. No entanto, sua eficiência cai em listas desordenadas ou com grandes variações entre os elementos.

Testes Realizados:
- Caso 1: Lista uniforme, elemento presente.
- Caso 2: Lista uniforme, elemento ausente.
- Caso 3: Lista não uniforme, elemento presente.
- Caso 4: Lista não uniforme, elemento ausente.
- Caso 5: Lista vazia.
